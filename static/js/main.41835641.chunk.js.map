{"version":3,"sources":["components/Home.js","components/About.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","href","About","Navbar","useState","navbar","isOpen","setOpen","console","log","onClick","aria-hidden","class","to","process","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAEaA,EAAO,WAClB,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,uBACb,uCACU,2CAGZ,yBAAKA,UAAU,uBACb,qLAMF,wBAAIA,UAAU,8BACZ,wBAAIA,UAAU,0BACZ,uBAAGC,KAAK,IACN,uBAAGD,UAAU,qBAGjB,wBAAIA,UAAU,2BACZ,uBAAGC,KAAK,IACN,uBAAGD,UAAU,sBAGjB,wBAAIA,UAAU,yBACZ,uBAAGC,KAAK,IACN,uBAAGD,UAAU,wBC7BdE,EAAQ,WACjB,OACI,yBAAKF,UAAU,qBACX,sC,cCACG,EAAS,WAAO,IAAD,EACAC,mBAAS,CACjCC,OAAQ,YAFgB,mBACnBC,EADmB,KACXC,EADW,KAMtBP,EAAY,cAChB,OAAOM,EAAOD,QACZ,IAAK,OACHL,GAAa,QACb,MACF,IAAK,OACHA,GAAa,QACb,MACF,IAAK,UACHA,GAAY,GAIhB,OADAQ,QAAQC,IAAIH,GAEV,oCACE,uBACEI,QAlBa,kBAAMH,EAAQ,CAACF,OAAQ,UAmBpCL,UAAU,sBACVW,cAAY,SAGZ,yBAAKX,UAAWA,GACd,yBAAKA,UAAU,iBACb,+BAEF,uBAAGY,MAAM,+BAA+BF,QA1B5B,kBAAMH,EAAQ,CAACF,OAAQ,YA2BnC,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAMa,GAAIC,kBAAV,QACA,kBAAC,IAAD,CAAMD,GAAIC,uBAAV,SACA,kBAAC,IAAD,CAAMD,GAAIC,4BAAV,cAGA,kBAAC,IAAD,CAAMD,GAAIC,wBAAV,UACA,kBAAC,IAAD,CAAMD,GAAIC,yBAAV,aAGJ,yBAAKd,UAAU,eACb,qDAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAMF,kBACjB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOE,KAAMF,uBACX,kBAAC,EAAD,UCxCKG,MAbf,WAEE,OACE,kBAAC,IAAD,KACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,SCEYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.41835641.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Home = () => {\n  return (\n    <div className=\"app__main-content\">\n      <div className=\"home-content\">\n        <div className=\"home-content__hello\">\n          <h1>\n            Hi I am <span>Do Tran</span>\n          </h1>\n        </div>\n        <div className=\"home-content__intro\">\n          <span>\n            I am a frontend web developer. I can provide clean code and pixel\n            perfect design. I also make website more & more interactive with web\n            animations.\n          </span>\n        </div>\n        <ul className=\"home-content__social-icons\">\n          <li className=\"home-content__facebook\">\n            <a href=\"\">\n              <i className=\"fa fa-facebook\"></i>\n            </a>\n          </li>\n          <li className=\"home-content__instagram\">\n            <a href=\"\">\n              <i className=\"fa fa-instagram\"></i>\n            </a>\n          </li>\n          <li className=\"home-content__twitter\">\n            <a href=\"\">\n              <i className=\"fa fa-twitter\"></i>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n \nexport const About = () => {\n    return (\n        <div className=\"app__main-content\">\n            <p>About</p>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Home } from \"./Home\";\nimport { About } from \"./About\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nexport const Navbar = () => {\n  const [isOpen, setOpen] = useState({\n    navbar: 'default'\n  });\n  const hanldeOpen = () => setOpen({navbar: 'open'});\n  const handleClose = () => setOpen({navbar: 'hide'});\n  let className = 'app__navbar';\n  switch(isOpen.navbar) {\n    case 'open':\n      className += ' show';\n      break;\n    case 'hide':\n      className += ' hide';\n      break;\n    case 'default':\n      className+= '';\n      break;\n  } \n  console.log(isOpen);\n  return (\n    <>\n      <i\n        onClick={hanldeOpen}\n        className=\"fa fa-bars collapse\"\n        aria-hidden=\"true\"\n      >  \n      </i>\n        <div className={className}>\n          <div className=\"navbar__image\">\n            <img />\n          </div>\n          <i class=\"fa fa-times-circle close-btn\" onClick={handleClose}></i>\n          <div className=\"navbar__menu\">\n            <div className=\"menu__list-item\">\n              <Link to={process.env.PUBLIC_URL + \"/\"}>Home</Link>\n              <Link to={process.env.PUBLIC_URL + \"/about\"}>About</Link>\n              <Link to={process.env.PUBLIC_URL + \"/portfolios\"}>\n                Portfolios\n              </Link>\n              <Link to={process.env.PUBLIC_URL + \"/resume\"}>Resume</Link>\n              <Link to={process.env.PUBLIC_URL + \"/contact\"}>Contact</Link>\n            </div>\n          </div>\n          <div className=\"nav__footer\">\n            <span>Â© 2019 Do Tran</span>\n          </div>\n        </div>\n\n      <Switch>\n        <Route exact path={process.env.PUBLIC_URL + \"/\"}>\n          <Home />\n        </Route>\n        <Route path={process.env.PUBLIC_URL + \"/about\"}>\n          <About />\n        </Route>\n      </Switch>\n    </>\n  );\n};\n","import React,{ useState, createContext } from 'react';\nimport './App.scss';\nimport { Navbar } from './components/Navbar'\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <Navbar></Navbar>\n      </div>\n    </Router>\n  );\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}